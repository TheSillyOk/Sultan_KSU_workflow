name: Sultan

permissions:
  contents: write
  actions: write

on:
  workflow_call:
  workflow_dispatch:
  pull_request:
  push:
    paths-ignore:
      - 'README.md'
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        kernel:
          - codename: gs201
            repo: "android_kernel_google_gs201"
            android_version: "android14"
            kernel_version: "6.1"
    steps:
      - name: Download and extract GCC 14.2.0 toolchain
        run: |
          echo "Downloading GCC 14.2.0 cross-compiler toolchain..."
          wget https://www.kernel.org/pub/tools/crosstool/files/bin/x86_64/14.2.0/x86_64-gcc-14.2.0-nolibc-aarch64-linux.tar.gz
          echo "Extracting .gz file..."
          gunzip x86_64-gcc-14.2.0-nolibc-aarch64-linux.tar.gz
          echo "Extracting .tar file..."
          tar -xf x86_64-gcc-14.2.0-nolibc-aarch64-linux.tar
          echo "GCC 14.2.0 toolchain extracted successfully"

      - name: Set CONFIG Environment Variable
        run: |
          CONFIG="${{ matrix.kernel.repo }}"
          
          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          
          echo "CONFIG set to: $CONFIG"

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."
          
          ANYKERNEL_BRANCH="sultan-${{ matrix.kernel.codename }}"
          SUSFS_BRANCH="gki-${{ matrix.kernel.android_version }}-${{ matrix.kernel.kernel_version }}"

          # Debug print the branches
          echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
          echo "Using branch for SUSFS: $SUSFS_BRANCH"

          # Clone repositories using the branch names
          git clone --depth=1 https://github.com/TheWildJames/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone --depth=1 https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
          git clone --depth=1 https://github.com/TheWildJames/kernel_patches.git
          git clone --depth=1 https://github.com/kerneltoast/${{ matrix.kernel.repo }}
          git clone --depth=1 https://github.com/TheSillyOk/kernel_ls_patches ok_patches
      
      - name: Add KernelSU
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Adding KernelSU..."
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s next

      - name: Apply SUSFS Patches
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Applying SUSFS patches..."
          
          # Copy SUSFS patches
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ matrix.kernel.android_version }}-${{ matrix.kernel.kernel_version }}.patch ./
          cp ../susfs4ksu/kernel_patches/fs/* ./fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/

          cd ./KernelSU*

          patch -p1 --forward < ../../ok_patches/KSUN/KSUN-SUSFS-1.5.9.patch
          patch -p1 --forward < ../../ok_patches/KSUN/WildJames-Manager.patch

          cd ..
          patch -p1 < 50_add_susfs_in_gki-${{ matrix.kernel.android_version }}-${{ matrix.kernel.kernel_version }}.patch || true
          patch -p1 --fuzz=3 < ../kernel_patches/sultan/sys.c_fix.patch

      - name: Apply KSU Hooks
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          patch -p1 -F 3 < ../kernel_patches/next/scope_min_manual_hooks_v1.5.patch

      - name: Add SUSFS Configuration Settings
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Adding configuration settings to ${{ matrix.kernel.codename }}_defconfig..."

          # Add KSU configuration settings
          echo "CONFIG_KSU=y" >> ./arch/arm64/configs/${{ matrix.kernel.codename }}_defconfig
          echo "CONFIG_KSU_KPROBES_HOOK=n" >> ./arch/arm64/configs/${{ matrix.kernel.codename }}_defconfig
          
          # Add SUSFS configuration settings
          echo "CONFIG_KSU_SUSFS=y" >> ./arch/arm64/configs/${{ matrix.kernel.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./arch/arm64/configs/${{ matrix.kernel.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./arch/arm64/configs/${{ matrix.kernel.codename }}_defconfig
          
          # Add additional tmpfs config setting
          echo "CONFIG_TMPFS_XATTR=y" >> ./arch/arm64/configs/${{ matrix.kernel.codename }}_defconfig
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./arch/arm64/configs/${{ matrix.kernel.codename }}_defconfig

          # Add additional config setting
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> ./arch/arm64/configs/${{ matrix.kernel.codename }}_defconfig
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> ./arch/arm64/configs/${{ matrix.kernel.codename }}_defconfig
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> ./arch/arm64/configs/${{ matrix.kernel.codename }}_defconfig

          # Add BBR Config
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./arch/arm64/configs/${{ matrix.kernel.codename }}_defconfig 
          echo "CONFIG_TCP_CONG_BBR=y" >> ./arch/arm64/configs/${{ matrix.kernel.codename }}_defconfig
          echo "CONFIG_NET_SCH_FQ=y" >> ./arch/arm64/configs/${{ matrix.kernel.codename }}_defconfig
          echo "CONFIG_TCP_CONG_BIC=n" >> ./arch/arm64/configs/${{ matrix.kernel.codename }}_defconfig
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./arch/arm64/configs/${{ matrix.kernel.codename }}_defconfig
          echo "CONFIG_TCP_CONG_HTCP=n" >> ./arch/arm64/configs/${{ matrix.kernel.codename }}_defconfig

      - name: Run sed and perl Commands
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Running sed commands..."
          sed -i 's/CONFIG_LOCALVERSION="-Sultan"/CONFIG_LOCALVERSION=""/' ./arch/arm64/configs/${{ matrix.kernel.codename }}_defconfig
          sed -i 's/res="$res${scm:++}"/res="$res${scm}"/' ./scripts/setlocalversion
          perl -pi -e 's/build-timestamp = \$\(or \$\(KBUILD_BUILD_TIMESTAMP\), \$\(build-timestamp-auto\)\)/build-timestamp = "Tue Jul  8 09:17:32 UTC 2025"/' ./init/Makefile

      - name: Build the Kernel
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          make CROSS_COMPILE=$GITHUB_WORKSPACE/gcc-14.2.0-nolibc/aarch64-linux/bin/aarch64-linux- CC=$GITHUB_WORKSPACE/gcc-14.2.0-nolibc/aarch64-linux/bin/aarch64-linux-gcc -j$(nproc --all) ${{ matrix.kernel.codename }}_defconfig
          make CROSS_COMPILE=$GITHUB_WORKSPACE/gcc-14.2.0-nolibc/aarch64-linux/bin/aarch64-linux- CC=$GITHUB_WORKSPACE/gcc-14.2.0-nolibc/aarch64-linux/bin/aarch64-linux-gcc -j$(nproc --all)

      - name: Copy Images
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"

          echo "Copying Image.lz4 and concatenating DTB files..."
          cp ./out/arch/arm64/boot/Image.lz4 ../AnyKernel3/Image.lz4
          if [ "${{ matrix.kernel.codename }}" == "gs201" ]; then
            cat ./out/google-devices/gs201/dts/*.dtb > ../AnyKernel3/dtb
            #cp ./out/google-devices/gs201/dts/dtbo.img ../AnyKernel3/dtbo.img
          fi

          cd ../AnyKernel3
          echo "ak3_dir=$(pwd)" >> $GITHUB_ENV
          echo "zip_name=${{ matrix.kernel.codename }}_A16_Sultan_KSUN_SUSFS.zip" >> $GITHUB_ENV

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.zip_name }}
          path: ${{ env.ak3_dir }}/*

  release:
    needs: build
    if: github.event_name != 'pull_request'
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts

      - name: Set Release Variables
        id: release_vars
        run: |
          echo "date=$(date +"%d/%m/%Y")" >> $GITHUB_ENV

          git clone --depth=1 "https://github.com/TheSillyOk/sh" "sh"

          echo "sh_dir=$PWD/sh" >> $GITHUB_ENV
          echo "artifacts_dir=$PWD/downloaded-artifacts" >> $GITHUB_ENV

          echo "KSUN_V=$(./sh/get_ksuver.sh "KernelSU-Next" "KernelSU-Next" "next")" >> $GITHUB_ENV
          echo "RKSU_V=$(./sh/get_ksuver.sh "rsuntk" "KernelSU" "main")" >> $GITHUB_ENV
          echo "SUKI_V=$(./sh/extract_ksuver.sh "https://github.com/SukiSU-Ultra/SukiSU-Ultra" "kernel/Makefile" "." "nongki")" >> $GITHUB_ENV

      - name: Generate Release Body
        id: release_body
        run: |
          cat << EOF > release_body.md
          ⚠️ **COMPATIBILITY NOTICE** ⚠️
          Please ensure compatibility by comparing release dates with official Sultan kernel releases:
          - Check official Sultan releases: https://github.com/kerneltoast/android_kernel_google_gs201/releases
          - This build is based on the latest Sultan kernel commits as of build date
          - Always verify your device's Android version matches the kernel target (Android 14)
          - Recommended to use kernels released within 30 days of official Sultan updates
          
          Module:
          -> https://github.com/sidex15/ksu_module_susfs
          
          Managers:
          -> https://github.com/WildKernels/Wild_KSU
          -> https://github.com/KernelSU-Next/KernelSU-Next
          
          Features:
          [+] Wild KSU & KernelSU-Next Managers
          [+] SUSFS v1.5.9
          [+] Magic Mount Support
          EOF

      - name: Set release tag
        env:
         GH_TOKEN: ${{ github.token }}
        run: |
            gh auth setup-git
            git clone --depth=1 "https://github.com/${{ github.repository }}" --depth=1 --branch="${{ github.ref_name }}" repo
            cd repo
            echo "repo_dir=$PWD" >> $GITHUB_ENV
            TAG=$(date +"%Y/%m/%d")
            LATEST_TAG=$(gh api repos/${{ github.repository }}/tags --jq '.[0].name')

            if [[ "$LATEST_TAG" == "$TAG"* ]]; then
              TAG=$(echo "$LATEST_TAG" | awk -F'-r' '{suffix=$2; if (!suffix) suffix=0; suffix++; printf "%s-r%d", $1, suffix}')
            else
              TAG="$TAG-r1"
            fi

            echo "Created tag: $TAG"
            echo "TAG=$TAG" >> $GITHUB_ENV
            git tag $TAG || true
            git push origin $TAG || true

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: ${{ env.date }}
          body_path: release_body.md

      - name: Upload Release Assets
        env:
         GH_TOKEN: ${{ github.token }}
        run: |
          bash ${{ env.sh_dir }}/upload-assets.sh "${{ env.TAG }}" "${{ env.repo_dir }}" "${{ env.artifacts_dir }}"
